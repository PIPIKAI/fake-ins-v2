// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package usercenter

import (
	"context"

	"github.com/PIPIKAI/fake-ins-v2/service/usercenter/rpc/gen/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AttemptReq        = pb.AttemptReq
	AttemptResp       = pb.AttemptResp
	EditInfoReq       = pb.EditInfoReq
	EditInfoResp      = pb.EditInfoResp
	GenerateTokenReq  = pb.GenerateTokenReq
	GenerateTokenResp = pb.GenerateTokenResp
	InfoReq           = pb.InfoReq
	InfoResp          = pb.InfoResp
	LoginReq          = pb.LoginReq
	LoginResp         = pb.LoginResp
	Message           = pb.Message
	RegisterReq       = pb.RegisterReq
	RegisterResp      = pb.RegisterResp
	UserDto           = pb.UserDto

	Usercenter interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Info(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UserDto, error)
		Logout(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
		GetByUserName(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UserDto, error)
		GetByUid(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UserDto, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) Info(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UserDto, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Info(ctx, in, opts...)
}

func (m *defaultUsercenter) Logout(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUsercenter) GetByUserName(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UserDto, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetByUserName(ctx, in, opts...)
}

func (m *defaultUsercenter) GetByUid(ctx context.Context, in *Message, opts ...grpc.CallOption) (*UserDto, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetByUid(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
